/*
 *  This file is part of the auxiliaries of VIB (Virtual Interactive Behaviour).
 */
package greta.application.ariavaluspa.tools;

import java.util.Arrays;
import java.util.stream.Collectors;
import greta.application.ariavaluspa.core.ARIAInformationStatesManager;
import greta.application.ariavaluspa.core.ARIALanguage;
import greta.application.ariavaluspa.core.InteractionState;

/**
 *
 * @author Angelo Cafaro
 */
public class ARIAInformationStatesSelectorForm extends javax.swing.JFrame {

    private ARIAInformationStatesManager ariaInfoStateManager;

    /**
     * Creates new form SSIFilterForm
     */
    public ARIAInformationStatesSelectorForm() {
        initComponents();

        // get the 'friendly' names for the interaction state options
        String[] interactionStateNames = Arrays.asList(InteractionState.values())
                .stream()
                .map(InteractionState::toString)
                .collect(Collectors.toList())
                .toArray(new String[InteractionState.NUM_INTERACTION_STATES]);

        // set the values straight from the filter options,
        cmbInteractionState.setModel(new javax.swing.DefaultComboBoxModel<>(interactionStateNames));
        
        // get the 'friendly' names for the language options
        String[] languageNames = Arrays.asList(ARIALanguage.values())
                .stream()
                .map(ARIALanguage::toString)
                .collect(Collectors.toList())
                .toArray(new String[ARIALanguage.NUM_LANGUAGES]);

        // set the values straight from the filter options,
        cmbLanguage.setModel(new javax.swing.DefaultComboBoxModel<>(languageNames));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbInteractionState = new javax.swing.JComboBox();
        lblInteractionState = new javax.swing.JLabel();
        lblLanguage = new javax.swing.JLabel();
        cmbLanguage = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cmbInteractionState.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "IDLE", "ENGAGING", "ENGAGED", "DISENGAGING" }));
        cmbInteractionState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbInteractionStateActionPerformed(evt);
            }
        });

        lblInteractionState.setText("State:");

        lblLanguage.setText("Language:");

        cmbLanguage.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "english", "french", "german" }));
        cmbLanguage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbLanguageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLanguage)
                    .addComponent(lblInteractionState))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbInteractionState, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbLanguage, 0, 137, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblInteractionState)
                    .addComponent(cmbInteractionState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLanguage)
                    .addComponent(cmbLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbInteractionStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbInteractionStateActionPerformed
        if (ariaInfoStateManager != null) {
            int index = cmbInteractionState.getSelectedIndex();
            if (index >= 0)
            {
                String stateToSet = "";
                switch (index) {
                    case 0: {stateToSet = "idle"; break;}
                    case 1: {stateToSet = "engaging"; break;}
                    case 2: {stateToSet = "engaged"; break;}
                    case 3: {stateToSet = "disengaging"; break;}
                    default: {stateToSet = "idle"; break;}
                }
                ariaInfoStateManager.performStateChange(stateToSet);
            }
        }
    }//GEN-LAST:event_cmbInteractionStateActionPerformed

    private void cmbLanguageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbLanguageActionPerformed
        if (ariaInfoStateManager != null) {
            int index = cmbLanguage.getSelectedIndex();
            if (index >= 0)
            {
                String languageToSet = "";
                switch (index) {
                    case 0: {languageToSet = "english"; break;}
                    case 1: {languageToSet = "french"; break;}
                    case 2: {languageToSet = "german"; break;}
                    default: {languageToSet = "english"; break;}
                }
                ariaInfoStateManager.performLanguageChange(languageToSet);
            }
        }
    }//GEN-LAST:event_cmbLanguageActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbInteractionState;
    private javax.swing.JComboBox cmbLanguage;
    private javax.swing.JLabel lblInteractionState;
    private javax.swing.JLabel lblLanguage;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the ariaInfoStateManager
     */
    public ARIAInformationStatesManager getARIAInformationStateManager() {
        return ariaInfoStateManager;
    }

    /**
     * @param ariaInfoStateManager the ARIAInformationStatesManager to set
     */
    public void setARIAInformationStateManager(ARIAInformationStatesManager ariaInfoStateManager) {
        this.ariaInfoStateManager = ariaInfoStateManager;
    }

}
