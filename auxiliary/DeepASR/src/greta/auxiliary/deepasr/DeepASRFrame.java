/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package greta.auxiliary.deepasr;


import greta.core.intentions.IntentionPerformer;
import greta.core.signals.BMLTranslator;
import greta.core.signals.Signal;
import greta.core.signals.SignalEmitter;
import greta.core.signals.SignalPerformer;
import greta.core.util.CharacterManager;
import greta.core.util.Mode;
import java.nio.charset.StandardCharsets;
import static greta.core.util.audio.Audio.ANSI_RESET;
import static greta.core.util.audio.Audio.ANSI_YELLOW;
import greta.core.util.id.ID;
import greta.core.util.id.IDProvider;
import greta.core.util.xml.XML;
import greta.core.util.xml.XMLParser;
import greta.core.util.xml.XMLTree;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.OutputStreamWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StringReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import greta.auxiliary.llm.LLMFrame;
import greta.core.feedbacks.Callback;
import java.io.InputStream;
import java.util.stream.Collectors;
import greta.core.feedbacks.FeedbackPerformer;
import greta.core.signals.SpeechSignal;
import greta.core.util.time.Temporizable;
import greta.core.util.time.TimeMarker;

/**
 *
 * @author miche
 */
public class DeepASRFrame extends javax.swing.JFrame implements FeedbackPerformer {

    /**
     * Creates new form DeepGramFrame
     */
    
    private Server server;
    public Socket soc;
    public String answ;
    public static final String ANSI_RESET = "\u001B[0m";
    public static final String ANSI_BLACK = "\u001B[30m";
    public static final String ANSI_RED = "\u001B[31m";
    protected ArrayList<LLMFrame> llms = new ArrayList<LLMFrame>();
    private static String markup = "fml-apml";
    
    private String DeepASR_python_env_checker_path = "Common\\Data\\DeepASR\\DeepGram\\check_env.py";
    private String DeepASR_python_env_installer_path = "Common\\Data\\DeepASR\\DeepGram\\init_env.bat";
    private String python_asr_path = "\\Common\\Data\\DeepASR\\DeepGram\\DeepGram.py ";
    private Process server_process;
    private Thread server_shutdownHook;
    private boolean automaticListenBool = false;
     public CharacterManager cm;
    
    public String getAnswer() {
        return answ;
    }

    public void setAnswer(String answer) {
        this.answ = answer;
    }
    
   public void performFeedback(String type){
       //TO IMPLEMENT on subclass
   }
   public void performFeedback(ID AnimId, String type, SpeechSignal speechSignal, TimeMarker tm){
    performFeedback(type);
   };

   public void performFeedback(ID AnimId, String type, List<Temporizable> listTmp){
       performFeedback(type);
   };

   public void performFeedback(Callback callback){
   performFeedback(callback.type());
};
   public void setDetailsOption(boolean detailed){
       
   };

   public boolean areDetailedFeedbacks(){
     return true  ;
   };

   public void setDetailsOnFace(boolean detailsOnFace){
     
   };

   public boolean areDetailsOnFace(){
       return false;  
   };

   public void setDetailsOnGestures(boolean detailsOnGestures){
       
   };

   public boolean areDetailsOnGestures(){
       return false;  
   };
    
    
    
    
  
    public DeepASRFrame(CharacterManager cm) {
        
        server = new Server();
       
       this.cm=cm;
        
       
       
    }
    
     
    
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    private Boolean IsListenning = Boolean.FALSE;
   
    public void addLLMFrame(LLMFrame llm) {
        llms.add(llm);
    }
    
 
    public void removeLLMFrame(LLMFrame llm) {
        llms.remove(llm);
    }
    private void portActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_portActionPerformed

  /**
     * @param args the command line arguments
     */


   
}
