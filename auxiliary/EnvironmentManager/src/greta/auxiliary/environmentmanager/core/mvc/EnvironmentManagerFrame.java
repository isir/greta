/*
 * This file is part of the auxiliaries of Greta.
 *
 * Greta is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Greta is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Greta.  If not, see <https://www.gnu.org/licenses/>.
 *
 */
package greta.auxiliary.environmentmanager.core.mvc;

import greta.auxiliary.environmentmanager.util.Toolbox;
import greta.core.util.IniManager;
import java.util.Locale;

/**
 *
 * @author Brice Donval
 */
public final class EnvironmentManagerFrame extends javax.swing.JFrame {

    private final String propertyProtocol = "network.protocol";
    private final String propertyHost = "network.host";

    private final String propertyConnected = "network.connected";
    private final String propertyNotConnected = "network.notconnected";

    /* ------------------------------ */

    private boolean messageSenderConnected;
    private boolean messageReceiverConnected;

    private boolean fapSenderConnected;
    private boolean fapReceiverConnected;

    private boolean bapSenderConnected;
    private boolean bapReceiverConnected;

    private boolean audioSenderConnected;
    private boolean audioReceiverConnected;

    /* -------------------------------------------------- */

    private EnvironmentManagerController controller;

    /* ---------------------------------------------------------------------- */

    /**
     * Creates new form EnvironmentManagerFrame
     */
    public EnvironmentManagerFrame() {
        initComponents();
        initConnections();
        hideAudioConnections();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        panel = new javax.swing.JPanel();
        labelEnvironmentManager = new javax.swing.JLabel();
        separator1 = new javax.swing.JSeparator();
        labelType = new javax.swing.JLabel();
        fieldType = new javax.swing.JLabel();
        labelProtocol = new javax.swing.JLabel();
        fieldProtocol = new javax.swing.JLabel();
        labelHost = new javax.swing.JLabel();
        fieldHost = new javax.swing.JTextField();
        labelPortRange = new javax.swing.JLabel();
        fieldStartingPort = new javax.swing.JTextField();
        labelPortRangeSeparator = new javax.swing.JLabel();
        fieldEndingPort = new javax.swing.JTextField();
        separator2 = new javax.swing.JSeparator();
        labelSendersPorts = new javax.swing.JLabel();
        separator3 = new javax.swing.JSeparator();
        labelMessageSenderPort = new javax.swing.JLabel();
        fieldMessageSenderPort = new javax.swing.JLabel();
        labelFAPSenderPort = new javax.swing.JLabel();
        fieldFAPSenderPort = new javax.swing.JLabel();
        labelBAPSenderPort = new javax.swing.JLabel();
        fieldBAPSenderPort = new javax.swing.JLabel();
        labelAudioSenderPort = new javax.swing.JLabel();
        fieldAudioSenderPort = new javax.swing.JLabel();
        separator4 = new javax.swing.JSeparator();
        labelReceiversPorts = new javax.swing.JLabel();
        separator5 = new javax.swing.JSeparator();
        labelMessageReceiverPort = new javax.swing.JLabel();
        fieldMessageReceiverPort = new javax.swing.JLabel();
        labelFAPReceiverPort = new javax.swing.JLabel();
        fieldFAPReceiverPort = new javax.swing.JLabel();
        labelBAPReceiverPort = new javax.swing.JLabel();
        fieldBAPReceiverPort = new javax.swing.JLabel();
        labelAudioReceiverPort = new javax.swing.JLabel();
        fieldAudioReceiverPort = new javax.swing.JLabel();

        labelEnvironmentManager.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelEnvironmentManager.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelEnvironmentManager.setText("Environment Manager:");

        labelType.setText("Type:");

        fieldType.setText("undefined");

        labelProtocol.setText("Protocol:");

        fieldProtocol.setText("undefined");

        labelHost.setText("Host:");

        fieldHost.setText("undefined");
        fieldHost.setPreferredSize(new java.awt.Dimension(96, 20));
        fieldHost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldHostActionPerformed(evt);
            }
        });

        labelPortRange.setText("Port Range:");

        fieldStartingPort.setText("undefined");
        fieldStartingPort.setPreferredSize(new java.awt.Dimension(40, 20));
        fieldStartingPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldStartingPortActionPerformed(evt);
            }
        });
        fieldStartingPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldStartingPortKeyTyped(evt);
            }
        });

        labelPortRangeSeparator.setText("..");

        fieldEndingPort.setText("undefined");
        fieldEndingPort.setPreferredSize(new java.awt.Dimension(40, 20));
        fieldEndingPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldEndingPortActionPerformed(evt);
            }
        });
        fieldEndingPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldEndingPortKeyTyped(evt);
            }
        });

        separator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        labelSendersPorts.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelSendersPorts.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelSendersPorts.setText("Senders Ports:");

        labelMessageSenderPort.setText("Message Sender:");

        fieldMessageSenderPort.setText("undefined");
        fieldMessageSenderPort.setPreferredSize(new java.awt.Dimension(30, 14));

        labelFAPSenderPort.setText("FAP Sender:");

        fieldFAPSenderPort.setText("undefined");
        fieldFAPSenderPort.setPreferredSize(new java.awt.Dimension(30, 14));

        labelBAPSenderPort.setText("BAP Sender:");

        fieldBAPSenderPort.setText("undefined");
        fieldBAPSenderPort.setPreferredSize(new java.awt.Dimension(30, 14));

        labelAudioSenderPort.setText("Audio Sender:");

        fieldAudioSenderPort.setText("undefined");
        fieldAudioSenderPort.setPreferredSize(new java.awt.Dimension(30, 14));

        separator4.setOrientation(javax.swing.SwingConstants.VERTICAL);

        labelReceiversPorts.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelReceiversPorts.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelReceiversPorts.setText("Receivers Ports:");

        labelMessageReceiverPort.setText("Message Receiver:");

        fieldMessageReceiverPort.setText("undefined");
        fieldMessageReceiverPort.setPreferredSize(new java.awt.Dimension(30, 14));

        labelFAPReceiverPort.setText("FAP Receiver:");

        fieldFAPReceiverPort.setText("undefined");
        fieldFAPReceiverPort.setPreferredSize(new java.awt.Dimension(30, 14));

        labelBAPReceiverPort.setText("BAP Receiver:");

        fieldBAPReceiverPort.setText("undefined");
        fieldBAPReceiverPort.setPreferredSize(new java.awt.Dimension(30, 14));

        labelAudioReceiverPort.setText("Audio Receiver:");

        fieldAudioReceiverPort.setText("undefined");
        fieldAudioReceiverPort.setPreferredSize(new java.awt.Dimension(30, 14));

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(labelEnvironmentManager, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(separator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelLayout.createSequentialGroup()
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelType)
                            .addComponent(labelProtocol)
                            .addComponent(labelHost)
                            .addComponent(labelPortRange))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldType)
                            .addComponent(fieldProtocol)
                            .addComponent(fieldHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelLayout.createSequentialGroup()
                                .addComponent(fieldStartingPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelPortRangeSeparator)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fieldEndingPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(18, 18, 18)
                .addComponent(separator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelSendersPorts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(separator3)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelMessageSenderPort)
                            .addComponent(labelFAPSenderPort)
                            .addComponent(labelBAPSenderPort)
                            .addComponent(labelAudioSenderPort))
                        .addGap(18, 18, 18)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldMessageSenderPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldFAPSenderPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldBAPSenderPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldAudioSenderPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(separator4, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelReceiversPorts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(separator5)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelMessageReceiverPort)
                            .addComponent(labelFAPReceiverPort)
                            .addComponent(labelBAPReceiverPort)
                            .addComponent(labelAudioReceiverPort))
                        .addGap(18, 18, 18)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldMessageReceiverPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldFAPReceiverPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldBAPReceiverPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fieldAudioReceiverPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(labelEnvironmentManager)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(separator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelType)
                            .addComponent(fieldType))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelProtocol)
                            .addComponent(fieldProtocol))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelHost)
                            .addComponent(fieldHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelPortRange)
                            .addComponent(fieldStartingPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelPortRangeSeparator)
                            .addComponent(fieldEndingPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(separator2)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(labelSendersPorts)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(separator3, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelMessageSenderPort)
                            .addComponent(fieldMessageSenderPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelFAPSenderPort)
                            .addComponent(fieldFAPSenderPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelBAPSenderPort)
                            .addComponent(fieldBAPSenderPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelAudioSenderPort)
                            .addComponent(fieldAudioSenderPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(separator4)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(labelReceiversPorts)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(separator5, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelMessageReceiverPort)
                            .addComponent(fieldMessageReceiverPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelFAPReceiverPort)
                            .addComponent(fieldFAPReceiverPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelBAPReceiverPort)
                            .addComponent(fieldBAPReceiverPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelAudioReceiverPort)
                            .addComponent(fieldAudioReceiverPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        scrollPane.setViewportView(panel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initConnections() {
        setMessageSenderConnected(false, null);
        setMessageReceiverConnected(false, null);

        setFAPSenderConnected(false, null);
        setFAPReceiverConnected(false, null);

        setBAPSenderConnected(false, null);
        setBAPReceiverConnected(false, null);

        setAudioSenderConnected(false, null);
        setAudioReceiverConnected(false, null);
    }

    private void hideAudioConnections() {
        labelAudioSenderPort.setEnabled(false);
        fieldAudioSenderPort.setEnabled(false);

        labelAudioReceiverPort.setEnabled(false);
        fieldAudioReceiverPort.setEnabled(false);
    }

    /* ---------------------------------------------------------------------- */

    public void setCore(IEnvironmentManagerCore core) {
        core.getController().setView(this);
    }

    public void setController(EnvironmentManagerController controller) {
        if (this.controller != controller) {
            this.controller = controller;
            this.controller.setView(this);
        }
    }

    /* ---------------------------------------------------------------------- */

    public void init(String type, String protocol, String host, String startingPort, String endingPort) {
        initType(type);
        initProtocol(protocol);
        initHost(host);
        initPortRange(startingPort, endingPort);
    }

    /* -------------------------------------------------- */

    private void initType(String type) {
        fieldType.setText(type);
    }

    private void initProtocol(String protocol) {
        fieldProtocol.setText(protocol);
    }

    private void initHost(String host) {
        fieldHost.setText(host);
    }

    private void initPortRange(String startingPort, String endingPort) {
        fieldStartingPort.setText(startingPort);
        fieldEndingPort.setText(endingPort);
    }

    /* ---------------------------------------------------------------------- */

    private void setMessageSenderConnected(boolean connected, String port) {
        messageSenderConnected = connected;
        updateConnectionStatus(labelMessageSenderPort, fieldMessageSenderPort, messageSenderConnected, port);
    }

    private void setMessageReceiverConnected(boolean connected, String port) {
        messageReceiverConnected = connected;
        updateConnectionStatus(labelMessageReceiverPort, fieldMessageReceiverPort, messageReceiverConnected, port);
    }

    /* -------------------------------------------------- */

    private void setFAPSenderConnected(boolean connected, String port) {
        fapSenderConnected = connected;
        updateConnectionStatus(labelFAPSenderPort, fieldFAPSenderPort, fapSenderConnected, port);
    }

    private void setFAPReceiverConnected(boolean connected, String port) {
        fapReceiverConnected = connected;
        updateConnectionStatus(labelFAPReceiverPort, fieldFAPReceiverPort, fapReceiverConnected, port);
    }

    /* -------------------------------------------------- */

    private void setBAPSenderConnected(boolean connected, String port) {
        bapSenderConnected = connected;
        updateConnectionStatus(labelBAPSenderPort, fieldBAPSenderPort, bapSenderConnected, port);
    }

    private void setBAPReceiverConnected(boolean connected, String port) {
        bapReceiverConnected = connected;
        updateConnectionStatus(labelBAPReceiverPort, fieldBAPReceiverPort, bapReceiverConnected, port);
    }

    /* -------------------------------------------------- */

    private void setAudioSenderConnected(boolean connected, String port) {
        audioSenderConnected = connected;
        updateConnectionStatus(labelAudioSenderPort, fieldAudioSenderPort, audioSenderConnected, port);
    }

    private void setAudioReceiverConnected(boolean connected, String port) {
        audioReceiverConnected = connected;
        updateConnectionStatus(labelAudioReceiverPort, fieldAudioReceiverPort, audioReceiverConnected, port);
    }

    /* -------------------------------------------------- */

    private void updateConnectionStatus(javax.swing.JLabel connectorLabel, javax.swing.JLabel connectorPortField, boolean connected, String port) {
        if (connectorLabel != null) {
            connectorLabel.setForeground(connected ? Toolbox.colorGreen : ((port != null) ? Toolbox.colorRed : Toolbox.colorOrange));
            connectorLabel.setToolTipText(IniManager.getLocaleProperty(connected ? propertyConnected : propertyNotConnected));
            connectorPortField.setText((port != null) ? port : "--");
        }
    }

    /* ---------------------------------------------------------------------- */

    public void messageSenderHasConnected(String port) {
        setMessageSenderConnected(true, port);
    }

    public void messageSenderHasDisconnected(String port) {
        setMessageSenderConnected(false, port);
    }

    public void messageSenderHasDisappeared() {
        setMessageSenderConnected(false, null);
    }

    /* ------------------------------ */

    public void messageReceiverHasConnected(String port) {
        setMessageReceiverConnected(true, port);
    }

    public void messageReceiverHasDisconnected(String port) {
        setMessageReceiverConnected(false, port);
    }

    public void messageReceiverHasDisappeared() {
        setMessageReceiverConnected(false, null);
    }

    /* -------------------------------------------------- */

    public void fapSenderHasConnected(String port) {
        setFAPSenderConnected(true, port);
    }

    public void fapSenderHasDisconnected(String port) {
        setFAPSenderConnected(false, port);
    }

    public void fapSenderHasDisappeared() {
        setFAPSenderConnected(false, null);
    }

    /* ------------------------------ */

    public void fapReceiverHasConnected(String port) {
        setFAPReceiverConnected(true, port);
    }

    public void fapReceiverHasDisconnected(String port) {
        setFAPReceiverConnected(false, port);
    }

    public void fapReceiverHasDisappeared() {
        setFAPReceiverConnected(false, null);
    }

    /* -------------------------------------------------- */

    public void bapSenderHasConnected(String port) {
        setBAPSenderConnected(true, port);
    }

    public void bapSenderHasDisconnected(String port) {
        setBAPSenderConnected(false, port);
    }

    public void bapSenderHasDisappeared() {
        setBAPSenderConnected(false, null);
    }

    /* ------------------------------ */

    public void bapReceiverHasConnected(String port) {
        setBAPReceiverConnected(true, port);
    }

    public void bapReceiverHasDisconnected(String port) {
        setBAPReceiverConnected(false, port);
    }

    public void bapReceiverHasDisappeared() {
        setBAPReceiverConnected(false, null);
    }

    /* -------------------------------------------------- */

    public void audioSenderHasConnected(String port) {
        setAudioSenderConnected(true, port);
    }

    public void audioSenderHasDisconnected(String port) {
        setAudioSenderConnected(false, port);
    }

    public void audioSenderHasDisappeared() {
        setAudioSenderConnected(false, null);
    }

    /* ------------------------------ */

    public void audioReceiverHasConnected(String port) {
        setAudioReceiverConnected(true, port);
    }

    public void audioReceiverHasDisconnected(String port) {
        setAudioReceiverConnected(false, port);
    }

    public void audioReceiverHasDisappeared() {
        setAudioReceiverConnected(false, null);
    }

    /* ---------------------------------------------------------------------- */

    @Override
    public void setLocale(Locale l) {
        super.setLocale(l);
        updateLabelWithProperty(labelHost, propertyHost);
        updateLabelWithProperty(labelProtocol, propertyProtocol);
    }

    private void updateLabelWithProperty(javax.swing.JLabel label, String property) {
        if (label != null) {
            label.setText(IniManager.getLocaleProperty(property) + ":");
        }
    }

    /* ---------------------------------------------------------------------- */

    private void fieldStartingPortKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldStartingPortKeyTyped
        if (!portIsValid(evt.getKeyChar(), fieldStartingPort)) {
            evt.consume();
        }
    }//GEN-LAST:event_fieldStartingPortKeyTyped

    private void fieldEndingPortKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldEndingPortKeyTyped
        if (!portIsValid(evt.getKeyChar(), fieldEndingPort)) {
            evt.consume();
        }
    }//GEN-LAST:event_fieldEndingPortKeyTyped

    private boolean portIsValid(char keyTyped, javax.swing.JTextField textField) {

        if (Character.isDigit(keyTyped)) {
            String textBeforeSelection = textField.getText().substring(0, textField.getSelectionStart());
            String textAfterSelection = textField.getText().substring(textField.getSelectionEnd());
            int value = Integer.parseInt(textBeforeSelection + keyTyped + textAfterSelection);
            if (value > 0 && value < 65536) {
                return true;
            }
        }

        return false;
    }

    /* -------------------------------------------------- */

    private void fieldHostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldHostActionPerformed
        controller.hostHasChanged(fieldHost.getText());
    }//GEN-LAST:event_fieldHostActionPerformed

    private void fieldStartingPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldStartingPortActionPerformed
        controller.portRangeHasChanged(fieldStartingPort.getText(), fieldEndingPort.getText());
    }//GEN-LAST:event_fieldStartingPortActionPerformed

    private void fieldEndingPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldEndingPortActionPerformed
        controller.portRangeHasChanged(fieldStartingPort.getText(), fieldEndingPort.getText());
    }//GEN-LAST:event_fieldEndingPortActionPerformed

    /* ---------------------------------------------------------------------- */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel fieldAudioReceiverPort;
    private javax.swing.JLabel fieldAudioSenderPort;
    private javax.swing.JLabel fieldBAPReceiverPort;
    private javax.swing.JLabel fieldBAPSenderPort;
    private javax.swing.JTextField fieldEndingPort;
    private javax.swing.JLabel fieldFAPReceiverPort;
    private javax.swing.JLabel fieldFAPSenderPort;
    private javax.swing.JTextField fieldHost;
    private javax.swing.JLabel fieldMessageReceiverPort;
    private javax.swing.JLabel fieldMessageSenderPort;
    private javax.swing.JLabel fieldProtocol;
    private javax.swing.JTextField fieldStartingPort;
    private javax.swing.JLabel fieldType;
    private javax.swing.JLabel labelAudioReceiverPort;
    private javax.swing.JLabel labelAudioSenderPort;
    private javax.swing.JLabel labelBAPReceiverPort;
    private javax.swing.JLabel labelBAPSenderPort;
    private javax.swing.JLabel labelEnvironmentManager;
    private javax.swing.JLabel labelFAPReceiverPort;
    private javax.swing.JLabel labelFAPSenderPort;
    private javax.swing.JLabel labelHost;
    private javax.swing.JLabel labelMessageReceiverPort;
    private javax.swing.JLabel labelMessageSenderPort;
    private javax.swing.JLabel labelPortRange;
    private javax.swing.JLabel labelPortRangeSeparator;
    private javax.swing.JLabel labelProtocol;
    private javax.swing.JLabel labelReceiversPorts;
    private javax.swing.JLabel labelSendersPorts;
    private javax.swing.JLabel labelType;
    private javax.swing.JPanel panel;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JSeparator separator1;
    private javax.swing.JSeparator separator2;
    private javax.swing.JSeparator separator3;
    private javax.swing.JSeparator separator4;
    private javax.swing.JSeparator separator5;
    // End of variables declaration//GEN-END:variables

}
