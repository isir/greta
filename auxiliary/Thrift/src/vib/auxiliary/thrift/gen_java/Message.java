/* This file is part of Greta.
 * Greta is free software: you can redistribute it and / or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* 
* Greta is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with Greta.If not, see <http://www.gnu.org/licenses/>.
*//**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vib.auxiliary.thrift.gen_java;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-10")
public class Message implements org.apache.thrift.TBase<Message, Message._Fields>, java.io.Serializable, Cloneable, Comparable<Message> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Message");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField APFRAME_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("APFrameList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField STRING_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("string_content", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BINARY_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("binary_content", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("properties", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField FIRST_FRAME_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("firstFrameNumber", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField LAST_FRAME_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("lastFrameNumber", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MessageTupleSchemeFactory());
  }

  public String type; // required
  public String id; // required
  public long time; // required
  public List<ThriftAnimParamFrame> APFrameList; // optional
  public String string_content; // optional
  public ByteBuffer binary_content; // optional
  public Map<String,String> properties; // optional
  public long firstFrameNumber; // optional
  public long lastFrameNumber; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TYPE((short)1, "type"),
    ID((short)2, "id"),
    TIME((short)3, "time"),
    APFRAME_LIST((short)4, "APFrameList"),
    STRING_CONTENT((short)5, "string_content"),
    BINARY_CONTENT((short)6, "binary_content"),
    PROPERTIES((short)7, "properties"),
    FIRST_FRAME_NUMBER((short)8, "firstFrameNumber"),
    LAST_FRAME_NUMBER((short)9, "lastFrameNumber");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // ID
          return ID;
        case 3: // TIME
          return TIME;
        case 4: // APFRAME_LIST
          return APFRAME_LIST;
        case 5: // STRING_CONTENT
          return STRING_CONTENT;
        case 6: // BINARY_CONTENT
          return BINARY_CONTENT;
        case 7: // PROPERTIES
          return PROPERTIES;
        case 8: // FIRST_FRAME_NUMBER
          return FIRST_FRAME_NUMBER;
        case 9: // LAST_FRAME_NUMBER
          return LAST_FRAME_NUMBER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIME_ISSET_ID = 0;
  private static final int __FIRSTFRAMENUMBER_ISSET_ID = 1;
  private static final int __LASTFRAMENUMBER_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.APFRAME_LIST,_Fields.STRING_CONTENT,_Fields.BINARY_CONTENT,_Fields.PROPERTIES,_Fields.FIRST_FRAME_NUMBER,_Fields.LAST_FRAME_NUMBER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.APFRAME_LIST, new org.apache.thrift.meta_data.FieldMetaData("APFrameList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftAnimParamFrame.class))));
    tmpMap.put(_Fields.STRING_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("string_content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BINARY_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("binary_content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("properties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FIRST_FRAME_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("firstFrameNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_FRAME_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("lastFrameNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Message.class, metaDataMap);
  }

  public Message() {
  }

  public Message(
    String type,
    String id,
    long time)
  {
    this();
    this.type = type;
    this.id = id;
    this.time = time;
    setTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Message(Message other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.time = other.time;
    if (other.isSetAPFrameList()) {
      List<ThriftAnimParamFrame> __this__APFrameList = new ArrayList<ThriftAnimParamFrame>(other.APFrameList.size());
      for (ThriftAnimParamFrame other_element : other.APFrameList) {
        __this__APFrameList.add(new ThriftAnimParamFrame(other_element));
      }
      this.APFrameList = __this__APFrameList;
    }
    if (other.isSetString_content()) {
      this.string_content = other.string_content;
    }
    if (other.isSetBinary_content()) {
      this.binary_content = org.apache.thrift.TBaseHelper.copyBinary(other.binary_content);
    }
    if (other.isSetProperties()) {
      Map<String,String> __this__properties = new HashMap<String,String>(other.properties);
      this.properties = __this__properties;
    }
    this.firstFrameNumber = other.firstFrameNumber;
    this.lastFrameNumber = other.lastFrameNumber;
  }

  public Message deepCopy() {
    return new Message(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.id = null;
    setTimeIsSet(false);
    this.time = 0;
    this.APFrameList = null;
    this.string_content = null;
    this.binary_content = null;
    this.properties = null;
    setFirstFrameNumberIsSet(false);
    this.firstFrameNumber = 0;
    setLastFrameNumberIsSet(false);
    this.lastFrameNumber = 0;
  }

  public String getType() {
    return this.type;
  }

  public Message setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getId() {
    return this.id;
  }

  public Message setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public long getTime() {
    return this.time;
  }

  public Message setTime(long time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public int getAPFrameListSize() {
    return (this.APFrameList == null) ? 0 : this.APFrameList.size();
  }

  public java.util.Iterator<ThriftAnimParamFrame> getAPFrameListIterator() {
    return (this.APFrameList == null) ? null : this.APFrameList.iterator();
  }

  public void addToAPFrameList(ThriftAnimParamFrame elem) {
    if (this.APFrameList == null) {
      this.APFrameList = new ArrayList<ThriftAnimParamFrame>();
    }
    this.APFrameList.add(elem);
  }

  public List<ThriftAnimParamFrame> getAPFrameList() {
    return this.APFrameList;
  }

  public Message setAPFrameList(List<ThriftAnimParamFrame> APFrameList) {
    this.APFrameList = APFrameList;
    return this;
  }

  public void unsetAPFrameList() {
    this.APFrameList = null;
  }

  /** Returns true if field APFrameList is set (has been assigned a value) and false otherwise */
  public boolean isSetAPFrameList() {
    return this.APFrameList != null;
  }

  public void setAPFrameListIsSet(boolean value) {
    if (!value) {
      this.APFrameList = null;
    }
  }

  public String getString_content() {
    return this.string_content;
  }

  public Message setString_content(String string_content) {
    this.string_content = string_content;
    return this;
  }

  public void unsetString_content() {
    this.string_content = null;
  }

  /** Returns true if field string_content is set (has been assigned a value) and false otherwise */
  public boolean isSetString_content() {
    return this.string_content != null;
  }

  public void setString_contentIsSet(boolean value) {
    if (!value) {
      this.string_content = null;
    }
  }

  public byte[] getBinary_content() {
    setBinary_content(org.apache.thrift.TBaseHelper.rightSize(binary_content));
    return binary_content == null ? null : binary_content.array();
  }

  public ByteBuffer bufferForBinary_content() {
    return org.apache.thrift.TBaseHelper.copyBinary(binary_content);
  }

  public Message setBinary_content(byte[] binary_content) {
    this.binary_content = binary_content == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(binary_content, binary_content.length));
    return this;
  }

  public Message setBinary_content(ByteBuffer binary_content) {
    this.binary_content = org.apache.thrift.TBaseHelper.copyBinary(binary_content);
    return this;
  }

  public void unsetBinary_content() {
    this.binary_content = null;
  }

  /** Returns true if field binary_content is set (has been assigned a value) and false otherwise */
  public boolean isSetBinary_content() {
    return this.binary_content != null;
  }

  public void setBinary_contentIsSet(boolean value) {
    if (!value) {
      this.binary_content = null;
    }
  }

  public int getPropertiesSize() {
    return (this.properties == null) ? 0 : this.properties.size();
  }

  public void putToProperties(String key, String val) {
    if (this.properties == null) {
      this.properties = new HashMap<String,String>();
    }
    this.properties.put(key, val);
  }

  public Map<String,String> getProperties() {
    return this.properties;
  }

  public Message setProperties(Map<String,String> properties) {
    this.properties = properties;
    return this;
  }

  public void unsetProperties() {
    this.properties = null;
  }

  /** Returns true if field properties is set (has been assigned a value) and false otherwise */
  public boolean isSetProperties() {
    return this.properties != null;
  }

  public void setPropertiesIsSet(boolean value) {
    if (!value) {
      this.properties = null;
    }
  }

  public long getFirstFrameNumber() {
    return this.firstFrameNumber;
  }

  public Message setFirstFrameNumber(long firstFrameNumber) {
    this.firstFrameNumber = firstFrameNumber;
    setFirstFrameNumberIsSet(true);
    return this;
  }

  public void unsetFirstFrameNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIRSTFRAMENUMBER_ISSET_ID);
  }

  /** Returns true if field firstFrameNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstFrameNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __FIRSTFRAMENUMBER_ISSET_ID);
  }

  public void setFirstFrameNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIRSTFRAMENUMBER_ISSET_ID, value);
  }

  public long getLastFrameNumber() {
    return this.lastFrameNumber;
  }

  public Message setLastFrameNumber(long lastFrameNumber) {
    this.lastFrameNumber = lastFrameNumber;
    setLastFrameNumberIsSet(true);
    return this;
  }

  public void unsetLastFrameNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTFRAMENUMBER_ISSET_ID);
  }

  /** Returns true if field lastFrameNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetLastFrameNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTFRAMENUMBER_ISSET_ID);
  }

  public void setLastFrameNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTFRAMENUMBER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((Long)value);
      }
      break;

    case APFRAME_LIST:
      if (value == null) {
        unsetAPFrameList();
      } else {
        setAPFrameList((List<ThriftAnimParamFrame>)value);
      }
      break;

    case STRING_CONTENT:
      if (value == null) {
        unsetString_content();
      } else {
        setString_content((String)value);
      }
      break;

    case BINARY_CONTENT:
      if (value == null) {
        unsetBinary_content();
      } else {
        setBinary_content((ByteBuffer)value);
      }
      break;

    case PROPERTIES:
      if (value == null) {
        unsetProperties();
      } else {
        setProperties((Map<String,String>)value);
      }
      break;

    case FIRST_FRAME_NUMBER:
      if (value == null) {
        unsetFirstFrameNumber();
      } else {
        setFirstFrameNumber((Long)value);
      }
      break;

    case LAST_FRAME_NUMBER:
      if (value == null) {
        unsetLastFrameNumber();
      } else {
        setLastFrameNumber((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case ID:
      return getId();

    case TIME:
      return Long.valueOf(getTime());

    case APFRAME_LIST:
      return getAPFrameList();

    case STRING_CONTENT:
      return getString_content();

    case BINARY_CONTENT:
      return getBinary_content();

    case PROPERTIES:
      return getProperties();

    case FIRST_FRAME_NUMBER:
      return Long.valueOf(getFirstFrameNumber());

    case LAST_FRAME_NUMBER:
      return Long.valueOf(getLastFrameNumber());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case ID:
      return isSetId();
    case TIME:
      return isSetTime();
    case APFRAME_LIST:
      return isSetAPFrameList();
    case STRING_CONTENT:
      return isSetString_content();
    case BINARY_CONTENT:
      return isSetBinary_content();
    case PROPERTIES:
      return isSetProperties();
    case FIRST_FRAME_NUMBER:
      return isSetFirstFrameNumber();
    case LAST_FRAME_NUMBER:
      return isSetLastFrameNumber();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Message)
      return this.equals((Message)that);
    return false;
  }

  public boolean equals(Message that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_time = true;
    boolean that_present_time = true;
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_APFrameList = true && this.isSetAPFrameList();
    boolean that_present_APFrameList = true && that.isSetAPFrameList();
    if (this_present_APFrameList || that_present_APFrameList) {
      if (!(this_present_APFrameList && that_present_APFrameList))
        return false;
      if (!this.APFrameList.equals(that.APFrameList))
        return false;
    }

    boolean this_present_string_content = true && this.isSetString_content();
    boolean that_present_string_content = true && that.isSetString_content();
    if (this_present_string_content || that_present_string_content) {
      if (!(this_present_string_content && that_present_string_content))
        return false;
      if (!this.string_content.equals(that.string_content))
        return false;
    }

    boolean this_present_binary_content = true && this.isSetBinary_content();
    boolean that_present_binary_content = true && that.isSetBinary_content();
    if (this_present_binary_content || that_present_binary_content) {
      if (!(this_present_binary_content && that_present_binary_content))
        return false;
      if (!this.binary_content.equals(that.binary_content))
        return false;
    }

    boolean this_present_properties = true && this.isSetProperties();
    boolean that_present_properties = true && that.isSetProperties();
    if (this_present_properties || that_present_properties) {
      if (!(this_present_properties && that_present_properties))
        return false;
      if (!this.properties.equals(that.properties))
        return false;
    }

    boolean this_present_firstFrameNumber = true && this.isSetFirstFrameNumber();
    boolean that_present_firstFrameNumber = true && that.isSetFirstFrameNumber();
    if (this_present_firstFrameNumber || that_present_firstFrameNumber) {
      if (!(this_present_firstFrameNumber && that_present_firstFrameNumber))
        return false;
      if (this.firstFrameNumber != that.firstFrameNumber)
        return false;
    }

    boolean this_present_lastFrameNumber = true && this.isSetLastFrameNumber();
    boolean that_present_lastFrameNumber = true && that.isSetLastFrameNumber();
    if (this_present_lastFrameNumber || that_present_lastFrameNumber) {
      if (!(this_present_lastFrameNumber && that_present_lastFrameNumber))
        return false;
      if (this.lastFrameNumber != that.lastFrameNumber)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_time = true;
    list.add(present_time);
    if (present_time)
      list.add(time);

    boolean present_APFrameList = true && (isSetAPFrameList());
    list.add(present_APFrameList);
    if (present_APFrameList)
      list.add(APFrameList);

    boolean present_string_content = true && (isSetString_content());
    list.add(present_string_content);
    if (present_string_content)
      list.add(string_content);

    boolean present_binary_content = true && (isSetBinary_content());
    list.add(present_binary_content);
    if (present_binary_content)
      list.add(binary_content);

    boolean present_properties = true && (isSetProperties());
    list.add(present_properties);
    if (present_properties)
      list.add(properties);

    boolean present_firstFrameNumber = true && (isSetFirstFrameNumber());
    list.add(present_firstFrameNumber);
    if (present_firstFrameNumber)
      list.add(firstFrameNumber);

    boolean present_lastFrameNumber = true && (isSetLastFrameNumber());
    list.add(present_lastFrameNumber);
    if (present_lastFrameNumber)
      list.add(lastFrameNumber);

    return list.hashCode();
  }

  @Override
  public int compareTo(Message other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAPFrameList()).compareTo(other.isSetAPFrameList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAPFrameList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.APFrameList, other.APFrameList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetString_content()).compareTo(other.isSetString_content());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString_content()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string_content, other.string_content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinary_content()).compareTo(other.isSetBinary_content());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinary_content()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binary_content, other.binary_content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProperties()).compareTo(other.isSetProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.properties, other.properties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstFrameNumber()).compareTo(other.isSetFirstFrameNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstFrameNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstFrameNumber, other.firstFrameNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastFrameNumber()).compareTo(other.isSetLastFrameNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastFrameNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastFrameNumber, other.lastFrameNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Message(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    sb.append(this.time);
    first = false;
    if (isSetAPFrameList()) {
      if (!first) sb.append(", ");
      sb.append("APFrameList:");
      if (this.APFrameList == null) {
        sb.append("null");
      } else {
        sb.append(this.APFrameList);
      }
      first = false;
    }
    if (isSetString_content()) {
      if (!first) sb.append(", ");
      sb.append("string_content:");
      if (this.string_content == null) {
        sb.append("null");
      } else {
        sb.append(this.string_content);
      }
      first = false;
    }
    if (isSetBinary_content()) {
      if (!first) sb.append(", ");
      sb.append("binary_content:");
      if (this.binary_content == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.binary_content, sb);
      }
      first = false;
    }
    if (isSetProperties()) {
      if (!first) sb.append(", ");
      sb.append("properties:");
      if (this.properties == null) {
        sb.append("null");
      } else {
        sb.append(this.properties);
      }
      first = false;
    }
    if (isSetFirstFrameNumber()) {
      if (!first) sb.append(", ");
      sb.append("firstFrameNumber:");
      sb.append(this.firstFrameNumber);
      first = false;
    }
    if (isSetLastFrameNumber()) {
      if (!first) sb.append(", ");
      sb.append("lastFrameNumber:");
      sb.append(this.lastFrameNumber);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageStandardSchemeFactory implements SchemeFactory {
    public MessageStandardScheme getScheme() {
      return new MessageStandardScheme();
    }
  }

  private static class MessageStandardScheme extends StandardScheme<Message> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Message struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time = iprot.readI64();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // APFRAME_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.APFrameList = new ArrayList<ThriftAnimParamFrame>(_list8.size);
                ThriftAnimParamFrame _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new ThriftAnimParamFrame();
                  _elem9.read(iprot);
                  struct.APFrameList.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setAPFrameListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STRING_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.string_content = iprot.readString();
              struct.setString_contentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BINARY_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.binary_content = iprot.readBinary();
              struct.setBinary_contentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map11 = iprot.readMapBegin();
                struct.properties = new HashMap<String,String>(2*_map11.size);
                String _key12;
                String _val13;
                for (int _i14 = 0; _i14 < _map11.size; ++_i14)
                {
                  _key12 = iprot.readString();
                  _val13 = iprot.readString();
                  struct.properties.put(_key12, _val13);
                }
                iprot.readMapEnd();
              }
              struct.setPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FIRST_FRAME_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.firstFrameNumber = iprot.readI64();
              struct.setFirstFrameNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LAST_FRAME_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastFrameNumber = iprot.readI64();
              struct.setLastFrameNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Message struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIME_FIELD_DESC);
      oprot.writeI64(struct.time);
      oprot.writeFieldEnd();
      if (struct.APFrameList != null) {
        if (struct.isSetAPFrameList()) {
          oprot.writeFieldBegin(APFRAME_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.APFrameList.size()));
            for (ThriftAnimParamFrame _iter15 : struct.APFrameList)
            {
              _iter15.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.string_content != null) {
        if (struct.isSetString_content()) {
          oprot.writeFieldBegin(STRING_CONTENT_FIELD_DESC);
          oprot.writeString(struct.string_content);
          oprot.writeFieldEnd();
        }
      }
      if (struct.binary_content != null) {
        if (struct.isSetBinary_content()) {
          oprot.writeFieldBegin(BINARY_CONTENT_FIELD_DESC);
          oprot.writeBinary(struct.binary_content);
          oprot.writeFieldEnd();
        }
      }
      if (struct.properties != null) {
        if (struct.isSetProperties()) {
          oprot.writeFieldBegin(PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.properties.size()));
            for (Map.Entry<String, String> _iter16 : struct.properties.entrySet())
            {
              oprot.writeString(_iter16.getKey());
              oprot.writeString(_iter16.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFirstFrameNumber()) {
        oprot.writeFieldBegin(FIRST_FRAME_NUMBER_FIELD_DESC);
        oprot.writeI64(struct.firstFrameNumber);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastFrameNumber()) {
        oprot.writeFieldBegin(LAST_FRAME_NUMBER_FIELD_DESC);
        oprot.writeI64(struct.lastFrameNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageTupleSchemeFactory implements SchemeFactory {
    public MessageTupleScheme getScheme() {
      return new MessageTupleScheme();
    }
  }

  private static class MessageTupleScheme extends TupleScheme<Message> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetId()) {
        optionals.set(1);
      }
      if (struct.isSetTime()) {
        optionals.set(2);
      }
      if (struct.isSetAPFrameList()) {
        optionals.set(3);
      }
      if (struct.isSetString_content()) {
        optionals.set(4);
      }
      if (struct.isSetBinary_content()) {
        optionals.set(5);
      }
      if (struct.isSetProperties()) {
        optionals.set(6);
      }
      if (struct.isSetFirstFrameNumber()) {
        optionals.set(7);
      }
      if (struct.isSetLastFrameNumber()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetTime()) {
        oprot.writeI64(struct.time);
      }
      if (struct.isSetAPFrameList()) {
        {
          oprot.writeI32(struct.APFrameList.size());
          for (ThriftAnimParamFrame _iter17 : struct.APFrameList)
          {
            _iter17.write(oprot);
          }
        }
      }
      if (struct.isSetString_content()) {
        oprot.writeString(struct.string_content);
      }
      if (struct.isSetBinary_content()) {
        oprot.writeBinary(struct.binary_content);
      }
      if (struct.isSetProperties()) {
        {
          oprot.writeI32(struct.properties.size());
          for (Map.Entry<String, String> _iter18 : struct.properties.entrySet())
          {
            oprot.writeString(_iter18.getKey());
            oprot.writeString(_iter18.getValue());
          }
        }
      }
      if (struct.isSetFirstFrameNumber()) {
        oprot.writeI64(struct.firstFrameNumber);
      }
      if (struct.isSetLastFrameNumber()) {
        oprot.writeI64(struct.lastFrameNumber);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.time = iprot.readI64();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list19 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.APFrameList = new ArrayList<ThriftAnimParamFrame>(_list19.size);
          ThriftAnimParamFrame _elem20;
          for (int _i21 = 0; _i21 < _list19.size; ++_i21)
          {
            _elem20 = new ThriftAnimParamFrame();
            _elem20.read(iprot);
            struct.APFrameList.add(_elem20);
          }
        }
        struct.setAPFrameListIsSet(true);
      }
      if (incoming.get(4)) {
        struct.string_content = iprot.readString();
        struct.setString_contentIsSet(true);
      }
      if (incoming.get(5)) {
        struct.binary_content = iprot.readBinary();
        struct.setBinary_contentIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.properties = new HashMap<String,String>(2*_map22.size);
          String _key23;
          String _val24;
          for (int _i25 = 0; _i25 < _map22.size; ++_i25)
          {
            _key23 = iprot.readString();
            _val24 = iprot.readString();
            struct.properties.put(_key23, _val24);
          }
        }
        struct.setPropertiesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.firstFrameNumber = iprot.readI64();
        struct.setFirstFrameNumberIsSet(true);
      }
      if (incoming.get(8)) {
        struct.lastFrameNumber = iprot.readI64();
        struct.setLastFrameNumberIsSet(true);
      }
    }
  }

}

