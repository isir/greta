/* This file is part of Greta.
 * Greta is free software: you can redistribute it and / or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* 
* Greta is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with Greta.If not, see <http://www.gnu.org/licenses/>.
*//**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vib.auxiliary.thrift.gen_java;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-10")
public class ThriftAnimParamFrame implements org.apache.thrift.TBase<ThriftAnimParamFrame, ThriftAnimParamFrame._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftAnimParamFrame> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftAnimParamFrame");

  private static final org.apache.thrift.protocol.TField ANIM_PARAM_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("animParamList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField FRAME_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("frameNumber", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftAnimParamFrameStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftAnimParamFrameTupleSchemeFactory());
  }

  public List<ThriftAnimParam> animParamList; // required
  public int frameNumber; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ANIM_PARAM_LIST((short)1, "animParamList"),
    FRAME_NUMBER((short)2, "frameNumber");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ANIM_PARAM_LIST
          return ANIM_PARAM_LIST;
        case 2: // FRAME_NUMBER
          return FRAME_NUMBER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FRAMENUMBER_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ANIM_PARAM_LIST, new org.apache.thrift.meta_data.FieldMetaData("animParamList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftAnimParam.class))));
    tmpMap.put(_Fields.FRAME_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("frameNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftAnimParamFrame.class, metaDataMap);
  }

  public ThriftAnimParamFrame() {
  }

  public ThriftAnimParamFrame(
    List<ThriftAnimParam> animParamList,
    int frameNumber)
  {
    this();
    this.animParamList = animParamList;
    this.frameNumber = frameNumber;
    setFrameNumberIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftAnimParamFrame(ThriftAnimParamFrame other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAnimParamList()) {
      List<ThriftAnimParam> __this__animParamList = new ArrayList<ThriftAnimParam>(other.animParamList.size());
      for (ThriftAnimParam other_element : other.animParamList) {
        __this__animParamList.add(new ThriftAnimParam(other_element));
      }
      this.animParamList = __this__animParamList;
    }
    this.frameNumber = other.frameNumber;
  }

  public ThriftAnimParamFrame deepCopy() {
    return new ThriftAnimParamFrame(this);
  }

  @Override
  public void clear() {
    this.animParamList = null;
    setFrameNumberIsSet(false);
    this.frameNumber = 0;
  }

  public int getAnimParamListSize() {
    return (this.animParamList == null) ? 0 : this.animParamList.size();
  }

  public java.util.Iterator<ThriftAnimParam> getAnimParamListIterator() {
    return (this.animParamList == null) ? null : this.animParamList.iterator();
  }

  public void addToAnimParamList(ThriftAnimParam elem) {
    if (this.animParamList == null) {
      this.animParamList = new ArrayList<ThriftAnimParam>();
    }
    this.animParamList.add(elem);
  }

  public List<ThriftAnimParam> getAnimParamList() {
    return this.animParamList;
  }

  public ThriftAnimParamFrame setAnimParamList(List<ThriftAnimParam> animParamList) {
    this.animParamList = animParamList;
    return this;
  }

  public void unsetAnimParamList() {
    this.animParamList = null;
  }

  /** Returns true if field animParamList is set (has been assigned a value) and false otherwise */
  public boolean isSetAnimParamList() {
    return this.animParamList != null;
  }

  public void setAnimParamListIsSet(boolean value) {
    if (!value) {
      this.animParamList = null;
    }
  }

  public int getFrameNumber() {
    return this.frameNumber;
  }

  public ThriftAnimParamFrame setFrameNumber(int frameNumber) {
    this.frameNumber = frameNumber;
    setFrameNumberIsSet(true);
    return this;
  }

  public void unsetFrameNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRAMENUMBER_ISSET_ID);
  }

  /** Returns true if field frameNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetFrameNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __FRAMENUMBER_ISSET_ID);
  }

  public void setFrameNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRAMENUMBER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ANIM_PARAM_LIST:
      if (value == null) {
        unsetAnimParamList();
      } else {
        setAnimParamList((List<ThriftAnimParam>)value);
      }
      break;

    case FRAME_NUMBER:
      if (value == null) {
        unsetFrameNumber();
      } else {
        setFrameNumber((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ANIM_PARAM_LIST:
      return getAnimParamList();

    case FRAME_NUMBER:
      return Integer.valueOf(getFrameNumber());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ANIM_PARAM_LIST:
      return isSetAnimParamList();
    case FRAME_NUMBER:
      return isSetFrameNumber();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftAnimParamFrame)
      return this.equals((ThriftAnimParamFrame)that);
    return false;
  }

  public boolean equals(ThriftAnimParamFrame that) {
    if (that == null)
      return false;

    boolean this_present_animParamList = true && this.isSetAnimParamList();
    boolean that_present_animParamList = true && that.isSetAnimParamList();
    if (this_present_animParamList || that_present_animParamList) {
      if (!(this_present_animParamList && that_present_animParamList))
        return false;
      if (!this.animParamList.equals(that.animParamList))
        return false;
    }

    boolean this_present_frameNumber = true;
    boolean that_present_frameNumber = true;
    if (this_present_frameNumber || that_present_frameNumber) {
      if (!(this_present_frameNumber && that_present_frameNumber))
        return false;
      if (this.frameNumber != that.frameNumber)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_animParamList = true && (isSetAnimParamList());
    list.add(present_animParamList);
    if (present_animParamList)
      list.add(animParamList);

    boolean present_frameNumber = true;
    list.add(present_frameNumber);
    if (present_frameNumber)
      list.add(frameNumber);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftAnimParamFrame other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAnimParamList()).compareTo(other.isSetAnimParamList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnimParamList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.animParamList, other.animParamList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrameNumber()).compareTo(other.isSetFrameNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrameNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frameNumber, other.frameNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftAnimParamFrame(");
    boolean first = true;

    sb.append("animParamList:");
    if (this.animParamList == null) {
      sb.append("null");
    } else {
      sb.append(this.animParamList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("frameNumber:");
    sb.append(this.frameNumber);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftAnimParamFrameStandardSchemeFactory implements SchemeFactory {
    public ThriftAnimParamFrameStandardScheme getScheme() {
      return new ThriftAnimParamFrameStandardScheme();
    }
  }

  private static class ThriftAnimParamFrameStandardScheme extends StandardScheme<ThriftAnimParamFrame> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftAnimParamFrame struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ANIM_PARAM_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.animParamList = new ArrayList<ThriftAnimParam>(_list0.size);
                ThriftAnimParam _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new ThriftAnimParam();
                  _elem1.read(iprot);
                  struct.animParamList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setAnimParamListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FRAME_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.frameNumber = iprot.readI32();
              struct.setFrameNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftAnimParamFrame struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.animParamList != null) {
        oprot.writeFieldBegin(ANIM_PARAM_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.animParamList.size()));
          for (ThriftAnimParam _iter3 : struct.animParamList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FRAME_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.frameNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftAnimParamFrameTupleSchemeFactory implements SchemeFactory {
    public ThriftAnimParamFrameTupleScheme getScheme() {
      return new ThriftAnimParamFrameTupleScheme();
    }
  }

  private static class ThriftAnimParamFrameTupleScheme extends TupleScheme<ThriftAnimParamFrame> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftAnimParamFrame struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAnimParamList()) {
        optionals.set(0);
      }
      if (struct.isSetFrameNumber()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetAnimParamList()) {
        {
          oprot.writeI32(struct.animParamList.size());
          for (ThriftAnimParam _iter4 : struct.animParamList)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetFrameNumber()) {
        oprot.writeI32(struct.frameNumber);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftAnimParamFrame struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.animParamList = new ArrayList<ThriftAnimParam>(_list5.size);
          ThriftAnimParam _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new ThriftAnimParam();
            _elem6.read(iprot);
            struct.animParamList.add(_elem6);
          }
        }
        struct.setAnimParamListIsSet(true);
      }
      if (incoming.get(1)) {
        struct.frameNumber = iprot.readI32();
        struct.setFrameNumberIsSet(true);
      }
    }
  }

}

