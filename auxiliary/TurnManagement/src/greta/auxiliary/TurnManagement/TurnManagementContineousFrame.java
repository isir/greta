/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package greta.auxiliary.TurnManagement;

import greta.auxiliary.llm.LLMFrame;
import greta.auxiliary.deepasr.ASRReceiver;
import greta.core.intentions.IntentionPerformer;
import greta.core.feedbacks.Callback;
import greta.core.feedbacks.FeedbackPerformer;
import greta.core.util.CharacterManager;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Takeshi Saga
 */

public class TurnManagementContineousFrame extends javax.swing.JFrame implements FeedbackPerformer, ASRReceiver {
    
    private String feedback_bat_path = "";
    private Process server_process;

    private String batch_main_path = "Common\\Data\\TurnManagement\\run_turnManager_vap_audio.bat";
    
    private ArrayList<IntentionPerformer> performers = new ArrayList<IntentionPerformer>();
    private TurnManagement turnManager;
    private Boolean turnManagerActivated = false;
    
    private CharacterManager cm;
    
    private String port;
    
    private ArrayList<LLMFrame> llmsLocal = new ArrayList<LLMFrame>();
    private ArrayList<IntentionPerformer> performersLocal = new ArrayList<IntentionPerformer>();
    
    private ArrayList<String> batch_main_path_list = new ArrayList<String>();
    
    /**
     * Creates new form TurnManagementFrame
     */
    public TurnManagementContineousFrame() throws IOException {

        initComponents();
        System.out.println("greta.auxiliary.TurnManagement.TurnManagementFrame()");

        batch_main_path_list.add("Common\\Data\\TurnManagement\\run_turnManager_vap_audio.bat");
        batch_main_path_list.add("Common\\Data\\TurnManagement\\run_turnManager_vap_audio_faceEmbed.bat");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        activateCheckBox = new javax.swing.JCheckBox();
        modelNameComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Mic port");

        jTextField1.setText("9000");

        jButton1.setText("Update");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        activateCheckBox.setText("activate");
        activateCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activateCheckBoxActionPerformed(evt);
            }
        });

        modelNameComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0: audio VAP", "1: audio/face embed VAP" }));
        modelNameComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelNameComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(activateCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addComponent(modelNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(activateCheckBox)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(modelNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(222, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        port = jTextField1.getText();
        if(turnManagerActivated){
            turnManager.resetMicServer(port);            
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void activateCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activateCheckBoxActionPerformed
        int modelIndex = modelNameComboBox.getSelectedIndex();
        batch_main_path = batch_main_path_list.get(modelIndex);
        try {
            // TODO add your handling code here:
            turnManager = new TurnManagement(cm, batch_main_path);
            for(LLMFrame llmLocal: llmsLocal){
                turnManager.llms.add(llmLocal);
            }
            performers = turnManager.getPerformers();
            for(IntentionPerformer performerLocal:performersLocal){
                performers.add(performerLocal);
            }
            turnManagerActivated = true;
            System.out.println("greta.auxiliary.TurnManagement.TurnManagementFrame(): activated");
        } catch (IOException ex) {
            Logger.getLogger(TurnManagementContineousFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_activateCheckBoxActionPerformed

    private void modelNameComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelNameComboBoxActionPerformed

    }//GEN-LAST:event_modelNameComboBoxActionPerformed
    
    @Override
    public void performFeedback(greta.core.util.id.ID id, String string, greta.core.signals.SpeechSignal ss, greta.core.util.time.TimeMarker tm) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        performFeedback(string);
    }

    @Override
    public void performFeedback(greta.core.util.id.ID id, String string, List<greta.core.util.time.Temporizable> list) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        performFeedback(string);
    }

    @Override
    public void performFeedback(Callback clbck) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        performFeedback(clbck.type());
    }

    public void performFeedback(String str) {
        System.out.println("greta.auxiliary.TurnManagement.TurnManagementContineousFrame.performFeedback - " + str);
        if(turnManagerActivated){
            turnManager.performFeedback(str);        
        }
    }    
    
    @Override
    public void setDetailsOption(boolean bln) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean areDetailedFeedbacks() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        return false;
    }

    @Override
    public void setDetailsOnFace(boolean bln) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean areDetailsOnFace() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        return false;
    }

    @Override
    public void setDetailsOnGestures(boolean bln) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean areDetailsOnGestures() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox activateCheckBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JComboBox<String> modelNameComboBox;
    // End of variables declaration//GEN-END:variables

    public void addIntentionPerformer(IntentionPerformer performer) {
        performersLocal.add(performer);
        if(turnManagerActivated){
            performers = turnManager.getPerformers();
            performers.add(performer);            
        }
    }
    
    public void removeIntentionPerformer(IntentionPerformer performer) {
        performers.remove(performer);
    }

    @Override
    public void receiveText(String text) {
        if(turnManagerActivated){
            turnManager.addTranscript(text);        
        }
        System.out.println("greta.auxiliary.TurnManagement.TurnManagement.receiveText: " + text);
    }

    public void addLLMFrame(LLMFrame llm) {
        llmsLocal.add(llm);
        if(turnManagerActivated){
            turnManager.llms.add(llm);
        }
    }

    public void removeLLMFrame(LLMFrame llm) {
        llmsLocal.remove(llm);
        if(turnManagerActivated){
            turnManager.llms.remove(llm);
        }
    }
    
}
