/*
 * This file is part of the auxiliaries of Greta.
 *
 * Greta is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Greta is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Greta.  If not, see <https://www.gnu.org/licenses/>.
 *
 */
package greta.auxiliary.openface2.gui;

import greta.auxiliary.openface2.util.StringArrayListener;
import greta.auxiliary.zeromq.ConnectionListener;
import greta.core.animation.mpeg4.bap.BAPFrame;
import greta.core.animation.mpeg4.bap.BAPFrameEmitter;
import greta.core.animation.mpeg4.bap.BAPFrameEmitterImpl;
import greta.core.animation.mpeg4.bap.BAPFramePerformer;
import greta.core.keyframes.face.AUEmitter;
import greta.core.keyframes.face.AUPerformer;
import greta.core.repositories.AUAPFrame;
import greta.core.util.id.ID;
import java.awt.Color;
import java.util.logging.Logger;
import com.illposed.osc.transport.udp.OSCPort;
import com.illposed.osc.transport.udp.OSCPortOut;
import java.io.IOException;
import java.net.InetAddress;
import java.util.logging.Level;

/**
 *
 * @author Philippe Gauthier <philippe.gauthier@sorbonne-universite.fr>
 * @author Brice Donval
 */
public class OpenFaceOutputStreamReader extends javax.swing.JFrame implements AUEmitter, BAPFrameEmitter, ConnectionListener, StringArrayListener {

    private static final Logger LOGGER = Logger.getLogger(OpenFaceOutputStreamReader.class.getName());

    private static final Color green = new Color(0, 150, 0);
    private static final Color red = Color.RED;

    private static final String fileProperty = "GUI.file";
    private static final String statusProperty = "word.status";
    private static final String connectedProperty = "network.connected";
    private static final String notConnectedProperty = "network.notconnected";
    private static final String hostProperty = "network.host";
    private static final String portProperty = "network.port";

    private String actualConnectedProperty;
    // OSC is use to monitor AUs signal, mainly for debug
    protected boolean useOSC = false;
    protected OSCPortOut oscOut = null;
    protected int oscPort = OSCPort.defaultSCOSCPort();    

    private BAPFrameEmitterImpl bapFrameEmitter = new BAPFrameEmitterImpl();
     
    
    /**
     * Creates new form OpenFaceOutputStreamReader
     */
    public OpenFaceOutputStreamReader() {
        initComponents();
        
        setConnected(false);
    }
    /*
    FILTERS
    */
    // We assume both reader use the same filter size
    
    

    /*
    OSC
    */
    public void setUseOSC(boolean b){        
        if(b){              
            startOSCOut(oscPort);            
        }
        else{
            stopOSCOut();
        }
    }
    
    protected void startOSCOut(int port){        
        try {            
            oscOut = new OSCPortOut(InetAddress.getLocalHost(), port);            
            useOSC = true;
        } catch (IOException ex) {
            useOSC = false;
            LOGGER.log(Level.WARNING, null, ex);
        }
        LOGGER.log(Level.INFO, String.format("startOSCOut port %d : %b", port, useOSC));
    }
    
    protected void stopOSCOut(){        
        useOSC = false;
        if(oscOut!=null){
            try {
                oscOut.disconnect();
            } catch (IOException ex) {           
                LOGGER.log(Level.WARNING, null, ex);
            }
        }
        LOGGER.log(Level.INFO, String.format("stopOSCOut : %b",  !useOSC));
    }
    
    protected int getOscOutPort(){
        return oscPort;
    }
    
    protected void setOscOutPort(int port){
        LOGGER.log(Level.INFO, String.format("setOscOutPort : %d",  port));
        oscPort = port;      
    }

    private void setConnected(boolean connected) {
        if (connected) {
            actualConnectedProperty = connectedProperty;

        } else {
            actualConnectedProperty = notConnectedProperty;

        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        northPanel = new javax.swing.JPanel();
        northPanelFiller1 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jCheckBoxSendOSC = new javax.swing.JCheckBox();
        jSpinnerSendOSCPort = new javax.swing.JSpinner();
        northPanelFiller2 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));


        mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        mainPanel.setLayout(new java.awt.BorderLayout(0, 10));

        northPanel.setLayout(new javax.swing.BoxLayout(northPanel, javax.swing.BoxLayout.LINE_AXIS));
        northPanel.add(northPanelFiller1);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter"));
        jPanel2.setToolTipText("Fitler");
        jPanel2.setName("Filter"); // NOI18N
        jPanel2.setLayout(new java.awt.GridLayout(2, 2));

        jCheckBoxSendOSC.setSelected(useOSC);
        jCheckBoxSendOSC.setText("OSCOut");
        jCheckBoxSendOSC.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBoxSendOSCStateChanged(evt);
            }
        });
        jCheckBoxSendOSC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSendOSCActionPerformed(evt);
            }
        });
        jPanel2.add(jCheckBoxSendOSC);

        jSpinnerSendOSCPort.setModel(new javax.swing.SpinnerNumberModel(6000, 6000, 99999, 1));
        jSpinnerSendOSCPort.setValue(getOscOutPort());
        jSpinnerSendOSCPort.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerSendOSCPortStateChanged(evt);
            }
        });
        jPanel2.add(jSpinnerSendOSCPort);

        jPanel1.add(jPanel2);

        northPanel.add(jPanel1);
        northPanel.add(northPanelFiller2);

        mainPanel.add(northPanel, java.awt.BorderLayout.NORTH);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>                        

    private void jSpinnerSendOSCPortStateChanged(javax.swing.event.ChangeEvent evt) {                                                 
        try {
            jSpinnerSendOSCPort.commitEdit();
        } catch ( java.text.ParseException e ) {  }
        int value = (Integer)jSpinnerSendOSCPort.getValue();
        setOscOutPort(value);
    }                                                

    private void jCheckBoxSendOSCStateChanged(javax.swing.event.ChangeEvent evt) {                                              
        // TODO add your handling code here:
        setUseOSC(jCheckBoxSendOSC.isSelected());
    }                                             

    private void jCheckBoxSendOSCActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
    }                                                



    private void setPanelComponentsEnabled(javax.swing.JPanel panel, boolean enabled) {
        for (java.awt.Component component : panel.getComponents()) {
            component.setEnabled(enabled);
        }
    }


    private void stopConnections() {
    }

    /* ---------------------------------------------------------------------- */

    // Variables declaration - do not modify                     
    private javax.swing.JCheckBox jCheckBoxSendOSC;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSpinner jSpinnerSendOSCPort;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel northPanel;
    private javax.swing.Box.Filler northPanelFiller1;
    private javax.swing.Box.Filler northPanelFiller2;
    // End of variables declaration                   

    /* ---------------------------------------------------------------------- */

    /**
     * @param index the tab index to select
     */


    /**
     * @return the selected tab index
     */

    /**
     * @param name the CSV file name to set
     */


    /**
     * @return the CSV file name
     */

    /**
     * @param host the ZeroMQ host to set
     */

    /**
     * @return the ZeroMQ host
     */


    /**
     * @param port the ZeroMQ port to set
     */

    /**
     * @return the ZeroMQ port
     */


    /**
     * @return the state of the "Perform" button
     */

    /* ---------------------------------------------------------------------- */



    /* ---------------------------------------------------------------------- *
     *                               AUEmitter                                *
     * ---------------------------------------------------------------------- */

    @Override
    public void addAUPerformer(AUPerformer auPerformer) {
        if (auPerformer != null) {
            LOGGER.info("addAUPerformer");
        }
    }

    @Override
    public void removeAUPerformer(AUPerformer auPerformer) {
        if (auPerformer != null) {
            LOGGER.info("removeAUPerformer");
        }
    }

    public void sendAUFrame(AUAPFrame auFrame, ID id) {
        //LOGGER.info("sendAUFrame");
    }

    /* ---------------------------------------------------------------------- *
     *                            BAPFrameEmitter                             *
     * ---------------------------------------------------------------------- */

    @Override
    public void addBAPFramePerformer(BAPFramePerformer bapFramePerformer) {
        if (bapFramePerformer != null) {
            LOGGER.info("addBAPFramePerformer");
            bapFrameEmitter.addBAPFramePerformer(bapFramePerformer);
        }
    }

    @Override
    public void removeBAPFramePerformer(BAPFramePerformer bapFramePerformer) {
        if (bapFramePerformer != null) {
            LOGGER.info("removeBAPFramePerformer");
            bapFrameEmitter.removeBAPFramePerformer(bapFramePerformer);
        }
    }

    public void sendBAPFrame(BAPFrame bapFrame, ID id) {
        //LOGGER.info("sendBAPFrame");
        bapFrameEmitter.sendBAPFrame(id, bapFrame);
    }

    /* ---------------------------------------------------------------------- *
     *                           ConnectionListener                           *
     * ---------------------------------------------------------------------- */

    @Override
    public void onConnection() {
        setConnected(true);
    }

    @Override
    public void onDisconnection() {
        setConnected(false);
    }

    /* ---------------------------------------------------------------------- *
     *                          StringArrayListener                           *
     * ---------------------------------------------------------------------- */


    private void updateConnectedLabels() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void stringArrayChanged(String[] stringArray) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
