/*
 * This file is part of Greta.
 *
 * Greta is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Greta is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Greta.  If not, see <https://www.gnu.org/licenses/>.
 *
 */
package greta.core.feedbacks.gui;

import greta.core.feedbacks.FeedbackPerformer;
import greta.core.util.IniManager;

/**
 *
 * @author Ken Prepin
 */
public class FeedbackPerformerFrame extends javax.swing.JFrame {

    private boolean detailedFeedbacks;
    private FeedbackPerformer feedbackPerf;

    /**
     * Creates new form FeedbackPerformerFrame
     */
    public FeedbackPerformerFrame() {
        initComponents();
    }

    public void setFeedbackPerformer(FeedbackPerformer feedbackPerf) {
        this.feedbackPerf = feedbackPerf;
    }

    public void setDetailedFeedbacks(boolean detailedFeedbacks) {
        CheckBoxDetailedFeedbacks.setSelected(detailedFeedbacks);
        update();
    }

    public boolean getDetailedFeedbacks() {
        return CheckBoxDetailedFeedbacks.isSelected();
    }

    public void setDetailsOnFace(boolean detailsOnFace) {
        RadioButton1_Face.setSelected(detailsOnFace);
        update();
    }

    public boolean getDetailsOnFace() {
        return RadioButton1_Face.isSelected();
    }

    public void setDetailsOnGestures(boolean detailsOnGestures) {
        RadioButton2_Gesture.setSelected(detailsOnGestures);
        update();
    }

    public boolean getDetailsOnGestures() {
        return RadioButton2_Gesture.isSelected();
    }

    public void update() {

        // Update of the frame
        RadioButton1_Face.setEnabled(CheckBoxDetailedFeedbacks.isSelected());
        RadioButton2_Gesture.setEnabled(CheckBoxDetailedFeedbacks.isSelected());

        // Update of the associated FeedbackPerformer
        feedbackPerf.setDetailsOption(CheckBoxDetailedFeedbacks.isSelected());
        if (CheckBoxDetailedFeedbacks.isSelected()) {
            feedbackPerf.setDetailsOnFace(RadioButton1_Face.isSelected());
            feedbackPerf.setDetailsOnGestures(RadioButton2_Gesture.isSelected());
            // if checkbox is checked but no option is selected the details option is desabled
            if(!RadioButton1_Face.isSelected() && !RadioButton2_Gesture.isSelected()){
                feedbackPerf.setDetailsOption(false);
            }
        } else {
            feedbackPerf.setDetailsOnFace(false);
            feedbackPerf.setDetailsOnGestures(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CheckBoxDetailedFeedbacks = new javax.swing.JCheckBox();
        RadioButton1_Face = new javax.swing.JRadioButton();
        RadioButton2_Gesture = new javax.swing.JRadioButton();

        CheckBoxDetailedFeedbacks.setText(IniManager.getLocaleProperty("feedbacks.details"));
        CheckBoxDetailedFeedbacks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBoxDetailedFeedbacksActionPerformed(evt);
            }
        });

        RadioButton1_Face.setText(IniManager.getLocaleProperty("modality.face"));
        RadioButton1_Face.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButton1_FaceActionPerformed(evt);
            }
        });

        RadioButton2_Gesture.setText(IniManager.getLocaleProperty("modality.gesture"));
        RadioButton2_Gesture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButton2_GestureActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CheckBoxDetailedFeedbacks)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RadioButton2_Gesture)
                            .addComponent(RadioButton1_Face))))
                .addContainerGap(282, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CheckBoxDetailedFeedbacks)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RadioButton1_Face)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RadioButton2_Gesture)
                .addContainerGap(224, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CheckBoxDetailedFeedbacksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBoxDetailedFeedbacksActionPerformed
        update();
    }//GEN-LAST:event_CheckBoxDetailedFeedbacksActionPerformed

    private void RadioButton2_GestureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButton2_GestureActionPerformed
        update();
    }//GEN-LAST:event_RadioButton2_GestureActionPerformed

    private void RadioButton1_FaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButton1_FaceActionPerformed
        update();
    }//GEN-LAST:event_RadioButton1_FaceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FeedbackPerformerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FeedbackPerformerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FeedbackPerformerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FeedbackPerformerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new FeedbackPerformerFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CheckBoxDetailedFeedbacks;
    private javax.swing.JRadioButton RadioButton1_Face;
    private javax.swing.JRadioButton RadioButton2_Gesture;
    // End of variables declaration//GEN-END:variables
}
