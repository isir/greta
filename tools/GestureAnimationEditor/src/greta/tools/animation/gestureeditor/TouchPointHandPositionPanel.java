/*
 * This file is part of Greta.
 *
 * Greta is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Greta is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Greta.  If not, see <https://www.gnu.org/licenses/>.
 *
 */
package greta.tools.animation.gestureeditor;

import greta.core.repositories.TouchPositionLibrary;
import greta.core.signals.gesture.Hand;
import greta.core.signals.gesture.TouchPosition;
import java.awt.event.ItemEvent;
import java.util.List;

/**
 *
 * @author Jing Huang
 */
public class TouchPointHandPositionPanel extends javax.swing.JPanel {

    private Hand _hand;
    private GestureEditor _gestureEditor;

    private boolean initialized = false;

    /**
     * Creates new form TouchPointHandPositionPanel
     */
    public TouchPointHandPositionPanel() {
        initComponents();
    }

    public void setTouchPoint(String TouchPoint) {
        this.touchPositionMenu.setSelectedItem(TouchPoint);
    }

    public String getTouchPoint() {
        return (touchPositionMenu.getSelectedItem().toString());
    }

    private void initValue() {
        if (!initialized) {
            touchPositionMenu.removeAllItems();
            List<TouchPosition> positions = TouchPositionLibrary.globalTouchPositionlibrary.getAll();
            for (TouchPosition tp : positions) {
                touchPositionMenu.addItem(tp.getId());
            }
            initialized = true;
        }
    }

    public void loadHand(Hand hand, GestureEditor parent) {
        initValue();
        _hand = hand;
        _gestureEditor = parent;
        TouchPosition pos = (TouchPosition) _hand.getPosition();
        if (pos.getId().isEmpty()) {
            setTouchPoint(touchPositionMenu.getSelectedItem().toString());
            pos.setId(getTouchPoint());
            _hand.setPosition(pos);
        } else {
            setTouchPoint(pos.getId());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        touchPositionLabel = new javax.swing.JLabel();
        touchPositionMenu = new javax.swing.JComboBox();

        setBorder(javax.swing.BorderFactory.createTitledBorder("TouchPosition"));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        touchPositionLabel.setText("Id:");

        touchPositionMenu.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        touchPositionMenu.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                touchPositionMenuItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(touchPositionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(touchPositionMenu, 0, 170, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(touchPositionLabel)
                    .addComponent(touchPositionMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void touchPositionMenuItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_touchPositionMenuItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED && _hand != null) {
            TouchPosition pos = new TouchPosition();
            pos.setId(evt.getItem().toString());
            _hand.setPosition(pos);
            _gestureEditor.sendCurrentKeyFrame();
        }
    }//GEN-LAST:event_touchPositionMenuItemStateChanged

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        initValue();
    }//GEN-LAST:event_formComponentShown

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel touchPositionLabel;
    private javax.swing.JComboBox touchPositionMenu;
    // End of variables declaration//GEN-END:variables
}
